#+TITLE: mcp-server-lib.el - Model Context Protocol Server Library for Emacs Lisp

[[https://github.com/laurynas-biveinis/mcp-server-lib.el/actions/workflows/elisp-test.yml][https://github.com/laurynas-biveinis/mcp-server-lib.el/actions/workflows/elisp-test.yml/badge.svg]]
[[https://github.com/laurynas-biveinis/mcp-server-lib.el/actions/workflows/linter.yml][https://github.com/laurynas-biveinis/mcp-server-lib.el/actions/workflows/linter.yml/badge.svg]]

* Overview

=mcp-server-lib.el= is an Emacs Lisp implementation of the [[https://modelcontextprotocol.io/][Model Context Protocol]] (MCP), an open standard for communication between AI applications, servers, and language models.

This library enables Emacs users and developers to create MCP servers that can provide context, tools, resources, and prompts to Large Language Models (LLMs).

* Features

- MCP server creation and management in Emacs
- API for tools to enable LLMs to execute Elisp functions
- Uses MCP stdio transport layer through an emacsclient-wrapping script

* Installation

=M-x package-vc-install https://github.com/laurynas-biveinis/mcp-server-lib.el/=

* Usage

** Script Installation

After installing the package from MELPA, the script path will be in a versioned directory. To get a stable path:

1. Run =M-x mcp-server-lib-install= to copy the script to =~/.emacs.d/=
2. The script will be available at =~/.emacs.d/emacs-mcp-stdio.sh=
3. This path remains stable across package updates

To remove the installed script: =M-x mcp-server-lib-uninstall=

** Basic Usage

Start Emacs daemon, then do =M-x mcp-server-lib-start= to start handling MCP requests and =M-x
mcp-server-lib-stop= to stop. These commands are provided by =mcp-server-lib-commands.el=.

For an MCP server example that uses this package, see [[https://github.com/laurynas-biveinis/elisp-mcp-dev][elisp-mcp-dev]].

** MCP Client Registration

To register with an MCP client, use the =emacs-mcp-stdio.sh= script with initialization
and cleanup functions. For example, to register [[https://github.com/laurynas-biveinis/elisp-mcp-dev][elisp-mcp-dev]] with Claude Code:

#+BEGIN_EXAMPLE
claude mcp add -s user -t stdio elisp-dev -- ~/.emacs.d/emacs-mcp-stdio.sh --init-function=elisp-dev-mcp-enable --stop-function=elisp-dev-mcp-disable
#+END_EXAMPLE

The script internally communicates with Emacs daemon through =emacsclient= and
handles serialization and deserialization so that arbitrary data survives transport.

** =emacs-mcp-stdio.sh= Options and Environment Variables

All options and environment variables are optional, although ~--init-function~ and
~--stop-function~ are very likely to be needed in order for the script to be useful.

*Script Options:*

| Option              | Description                                            |
|---------------------+--------------------------------------------------------|
| --init-function=NAME | Emacs function to call for MCP initialization           |
| --stop-function=NAME | Emacs function to call when the script exits            |
| --socket=PATH       | Emacs server socket to connect to                      |

*Environment Variables:*

| Variable            | Description                                            |
|---------------------+--------------------------------------------------------|
| EMACS_MCP_DEBUG_LOG | Path to a log file for debug logging                   |

When =EMACS_MCP_DEBUG_LOG= is set to a valid file path, the script will log all requests and responses with timestamps for debugging purposes. If the path is invalid or not writable, the script will exit with an error.

** Tracing

The package provides an Elisp variable =mcp-server-lib-log-io= that, when set to non-nil, enables logging of all JSON-RPC messages to the =*mcp-server-lib-log*= buffer. This is useful for tracing MCP requests and responses:

#+begin_src elisp
;; Enable MCP communication tracing
(setq mcp-server-lib-log-io t)

;; Start the MCP server
(mcp-server-lib-start)
#+end_src

The =*mcp-server-lib-log*= buffer will show incoming requests with ="-> (request)"= prefix and outgoing responses with ="<- (response)"= prefix, along with the full JSON message content. This makes it easy to inspect the communication flow between clients and the MCP server.

* API for dependent packages

=mcp-server-lib.el= provides a simple API for setting up and using the Model Context Protocol in Emacs.

** Core Functions

#+begin_src elisp
(mcp-server-lib-register-tool #'tool-handler-function
  :id "tool-name"
  :description "Tool description"
  :title "User-friendly Tool Name")
#+end_src

** Tool Handlers

Tool handler functions should:
- Return an Elisp string for successful execution
- Call ~mcp-server-lib-tool-throw~ for error returns or wrap potentially-failing
  operations with ~mcp-server-lib-with-error-handling~ macro

*** Tool Parameter Documentation

When registering tools with MCP, you can provide parameter descriptions that will be included in the JSON Schema.

Add an "MCP Parameters:" section to your handler function's docstring. This should be at the end of the docstring with each parameter in the format `parameter-name - description`:

#+begin_src elisp
(defun my-weather-handler (location)
  "Get weather information for a LOCATION.

MCP Parameters:
  location - city, address, or coordinates"
  ;; Function implementation...
  )

(mcp-server-lib-register-tool #'my-weather-handler
  :id "get-weather"
  :description "Get weather information")
#+end_src

Note: Do not include the "MCP Parameters:" section if your tool handler doesn't take any arguments.

*** Optional Tool Properties

When registering tools, you can provide optional properties:

| Property      | Description                                        | Example                  |
|--------------+--------------------------------------------------+--------------------------|
| :title       | User-friendly display name for the tool           | "Get Weather Forecast"   |
| :read-only   | If true, indicates tool doesn't modify environment | t or nil                 |

Example with optional properties:

#+begin_src elisp
(mcp-server-lib-register-tool #'my-weather-handler
  :id "get-weather"
  :description "Get weather information"
  :title "Weather Forecast"
  :read-only t)
#+end_src

*** Error Handling

The =mcp-server-lib-with-error-handling= macro provides automatic error handling. It will catch any errors and call =mcp-server-lib-tool-throw= on them:

#+begin_src elisp
(defun my-file-handler (filename)
  "Read a file and return its contents.
  
  MCP Parameters:
    filename - path to the file to read"
  (mcp-server-lib-with-error-handling
    (with-temp-buffer
      (insert-file-contents filename)
      (buffer-string))))
#+end_src

*** Utility Functions

MCP provides utility functions for creating JSON-RPC requests and processing responses:

#+begin_src elisp
(defun mcp-server-lib-create-tools-list-request (&optional id)
  "Create a tools/list JSON-RPC request with optional ID.
If ID is not provided, it defaults to 1.")

(defun mcp-server-lib-create-tools-call-request (tool-name &optional id args)
  "Create a tools/call JSON-RPC request for TOOL-NAME with optional ID and ARGS.
TOOL-NAME is the registered identifier of the tool to call.
ID is the JSON-RPC request ID, defaults to 1 if not provided.
ARGS is an association list of arguments to pass to the tool.")

(defun mcp-server-lib-process-jsonrpc-parsed (request)
  "Send REQUEST to the MCP server and return parsed response.
REQUEST should be a JSON string containing a valid JSON-RPC 2.0 request.
Returns the parsed JSON response as an association list.")
#+end_src

Examples:

#+begin_src elisp
;; Create a tool call request with arguments
(mcp-server-lib-create-tools-call-request 
  "get-weather" 
  42 
  '(("location" . "New York")))

;; Send a request and get parsed response (useful in tests)
(let* ((request (mcp-server-lib-create-tools-list-request))
       (response (mcp-server-lib-process-jsonrpc-parsed request)))
  ;; response is now an alist with 'result, 'error, etc.
  (alist-get 'tools (alist-get 'result response)))
#+end_src

This is primarily useful for writing tests in the packages using mcp-server-lib.el.

** Customization

*** Script Installation Directory

To install the script to a different location than =~/.emacs.d/=:

#+begin_src elisp
(setq mcp-server-lib-install-directory "/path/to/directory")
#+end_src

*** Usage Metrics

=mcp-server-lib.el= collects usage metrics to help understand how MCP tools are being used. This feature tracks the number of calls and errors for each operation.

**** Viewing Metrics

Use =M-x mcp-server-lib-show-metrics= to display detailed metrics in a buffer. The display shows:

- Method-level calls (initialize, tools/list, etc.)
- Tool-specific usage with call counts and error rates
- Notifications received
- Overall summary statistics

**** Resetting Metrics

Use =M-x mcp-server-lib-reset-metrics= to clear all collected metrics.

**** Automatic Display on Stop

A metrics summary is automatically displayed when the server stops if any metrics have been collected.

**** Programmatic Access

The metrics API provides programmatic access to collected statistics:

#+begin_src elisp
;; Get metrics for a specific operation
(let ((metrics (mcp-server-lib-metrics-get "tools/call:my-tool")))
  (when metrics
    (message "Tool called %d times with %d errors"
             (mcp-server-lib-metrics-calls metrics)
             (mcp-server-lib-metrics-errors metrics))))
#+end_src

The =mcp-server-lib-metrics= structure has two slots:
- =calls= - Total number of invocations
- =errors= - Number of failed invocations

Operation names follow these patterns:
- Method calls: ="initialize"=, ="tools/list"=, ="tools/call"=
- Tool-specific: ="tools/call:TOOL-NAME"= where TOOL-NAME is the registered tool ID

* Internals

** Transport

The main entry point for MCP communication is =mcp-server-lib-process-jsonrpc=:

#+begin_src elisp
(defun mcp-server-lib-process-jsonrpc (json-string)
  "Process a JSON-RPC message JSON-STRING and return the response.
This is the main entry point for stdio transport in MCP.")
#+end_src

This is what =emacs-mcp-stdio.sh= calls through emacsclient.

* License

This project is licensed under the GNU General Public License v3.0 (GPLv3) - see the LICENSE file for details.

* Acknowledgments

- [[https://modelcontextprotocol.io/][Model Context Protocol]] specification
- [[https://github.com/modelcontextprotocol/python-sdk][Python MCP SDK]] implementation
