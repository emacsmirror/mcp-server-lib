#+TITLE: mcp.el - Model Context Protocol for Emacs Lisp

[[https://github.com/laurynas-biveinis/mcp.el/actions/workflows/elisp-test.yml][https://github.com/laurynas-biveinis/mcp.el/actions/workflows/elisp-test.yml/badge.svg]]
[[https://github.com/laurynas-biveinis/mcp.el/actions/workflows/linter.yml][https://github.com/laurynas-biveinis/mcp.el/actions/workflows/linter.yml/badge.svg]]

* Overview

=mcp.el= is an Emacs Lisp implementation of the [[https://modelcontextprotocol.io/][Model Context Protocol]] (MCP), an open standard for communication between AI applications, servers, and language models.

This library enables Emacs users and developers to create MCP servers that can provide context, tools, resources, and prompts to Large Language Models (LLMs).

* Features

- MCP server creation and management in Emacs
- Resource registration for exposing data to LLMs
- Tool definitions for enabling LLMs to execute Elisp functions
- Prompt templating for structured LLM interactions
- Transport layer implementations (stdio, potentially others)
- JSON-RPC message handling

* Installation

* Usage

** MCP API

=mcp.el= provides a simple API for setting up and using the Model Context Protocol in Emacs.

*** Core Functions

#+begin_src elisp
;; Start the MCP server
(mcp-start)

;; Register a tool
(mcp-register-tool "tool-name" "Tool description" #'tool-handler-function)

;; Stop the MCP server
(mcp-stop)
#+end_src

*** Stdio Transport

The main entry point for MCP communication via stdio is =mcp-process-jsonrpc=:

#+begin_src elisp
(defun mcp-process-jsonrpc (json-string)
  "Process a JSON-RPC message JSON-STRING and return the response.
This is the main entry point for stdio transport in MCP.")
#+end_src

*** Usage Pattern with emacsclient

LLMs and other clients can interact with MCP.el using =emacsclient=:

#+begin_src shell
emacsclient -e '(mcp-process-jsonrpc "{\"jsonrpc\":\"2.0\",\"method\":\"mcp.server.describe\",\"id\":1}")'
#+end_src

The response is returned as stdout from the emacsclient process.

*** Stdio Adapter Script

For easier integration with tools that expect stdio communication, we provide =emacs-mcp-stdio.sh=:

#+begin_src shell
echo '{"jsonrpc":"2.0","method":"tools/list","id":1}' | ./emacs-mcp-stdio.sh
#+end_src

*Script Options:*

| Option              | Description                                            | Default      |
|---------------------+--------------------------------------------------------+--------------|
| --init-function=NAME | Emacs function to call for MCP initialization           | mcp-start    |
| --stop-function=NAME | Emacs function to call when the script exits            | mcp-stop     |
| --socket=PATH       | Emacs server socket to connect to                      | (none)       |

*Examples:*

- Basic usage:
  #+begin_src shell
  cat request.json | ./emacs-mcp-stdio.sh
  #+end_src

- Using a specific Emacs server:
  #+begin_src shell
  echo '{"jsonrpc":"2.0","method":"tools/list","id":1}' | \
    ./emacs-mcp-stdio.sh --socket="my-emacs-server"
  #+end_src

- Using custom initialization:
  #+begin_src shell
  echo '{"jsonrpc":"2.0","method":"tools/list","id":1}' | \
    ./emacs-mcp-stdio.sh --init-function=my-custom-mcp-setup --stop-function=my-custom-mcp-teardown
  #+end_src

** Implementation Details

*** Server Architecture

mcp.el uses a singleton server pattern:

#+begin_src elisp
;; Start the MCP server
(mcp-start)

;; Register tools with the global server
(mcp-register-tool "my-tool" "Tool description" #'my-handler-function)

;; Stop the server when done
(mcp-stop)
#+end_src

*** Transport

mcp.el uses stdio transport via emacsclient.

*** Client-Server Interaction Flow

1. LLM prepares a JSON-RPC request
2. LLM executes emacsclient with the request
3. emacsclient sends the command to the Emacs server
4. Emacs processes the request via =mcp-process-jsonrpc=
5. Response is returned to emacsclient as a string
6. emacsclient outputs the response to stdout
7. LLM reads and processes the response

*** Message Format

The function accepts and returns standard JSON-RPC 2.0 messages:

*Input Example:*
#+begin_src json
{
  "jsonrpc": "2.0",
  "method": "mcp.tool.my-tool",
  "params": {"param1": "value1"},
  "id": 1
}
#+end_src

*Output Example:*
#+begin_src json
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {"key": "value"}
}
#+end_src

* License

This project is licensed under the GNU General Public License v3.0 (GPLv3) - see the LICENSE file for details.

* Acknowledgments

- [[https://modelcontextprotocol.io/][Model Context Protocol]] specification
- [[https://github.com/modelcontextprotocol/python-sdk][Python MCP SDK]] implementation