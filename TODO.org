#+TITLE: mcp.el - TODO List

* Implementation Decisions

** JSON-RPC Implementation
- [X] Use built-in =jsonrpc.el= package (Emacs 27+) for JSON-RPC communication
  - Provides JSON-RPC 2.0 protocol support
  - Handles request/response tracking
  - Offers error handling mechanisms
  - Supports asynchronous communication
  - Manages connection lifecycle

** Transport Layer
- [X] Use =simple-httpd= package for HTTP transport
  - Server runs in a long-running Emacs session
  - Clients connect via HTTP to send/receive JSON-RPC messages
  - Easier debugging with standard HTTP tools
  - Potential for future extensions (WebSockets, SSE)
  - Better security options (TLS, authentication)

** Minimum Viable Implementation
- Focus on basic server + tool registration for initial release
- Defer resource and prompt implementation to future releases

* API Components to Implement

** Python SDK Parity (Based on Python SDK)
- [X] Server creation (`mcp-create-server`)
- [X] Server start/stop (`mcp-server-lib-start`, `mcp-server-lib-stop`)
- [X] Tool registration (`mcp-register-tool`)
- [ ] Resource registration (`mcp-register-resource`)
- [ ] Prompt registration (`mcp-register-prompt`)
- [ ] Server discovery (similar to Python SDK's `mcp.server_discovery`)
- [ ] LLM integration support (similar to `mcp.llm`)
- [ ] Client functionality (similar to `mcp.client`)
- [ ] Sampling support (similar to Python SDK's `settings.sampling`)
- [ ] Progress reporting (similar to Python SDK's context features)
- [ ] Image handling (support for multimodal resources)

** Resource Registration
- [ ] `mcp-register-resource` function for exposing data to clients
- [ ] Resource implementation and data serialization
- [ ] Resource metadata handling
- [ ] Resource streaming capabilities

** Prompt Registration
- [ ] Prompt template definition API
- [ ] Prompt variable handling
- [ ] Prompt execution functions
- [ ] Chat template support

** Transport Layer
- [X] HTTP server setup using =simple-httpd=
- [X] Stdio transport implementation
  - [X] Core mcp-process-jsonrpc function
  - [X] emacs-mcp-stdio.sh adapter script
- [X] Request/response handling
- [X] Error handling for transport-level issues
** JSON-RPC Message Handling
- [X] Use built-in =jsonrpc.el= for:
  - JSON-RPC 2.0 message parsing
  - Request/response management
  - Error handling and reporting
- [X] Adapt MCP-specific message formats to jsonrpc framework
- [X] Implement MCP "initialize" method
  - [X] Handle protocol version negotiation
  - [X] Exchange capability information
  - [X] Support "initialized" notification (including "notifications/initialized" format)
  - [X] Add version compatibility validation

** Configuration Variables
- [X] Server port configuration (similar to Python SDK's port setting)
  - [X] Configurable via function parameter (vs. Python's constructor parameter)
  - [ ] Environment variable support (similar to Python's FASTMCP_PORT)
- [ ] Server host configuration (similar to Python SDK's host setting)
  - [ ] Environment variable support (similar to Python's FASTMCP_HOST)
- [ ] Log level settings (similar to Python SDK's log_level setting)
  - [ ] Environment variable support (similar to Python's FASTMCP_LOG_LEVEL)
- [ ] Debug/trace options
  - [X] Add debug logging functionality controlled by customization option, similar to lsp-mode
  - [ ] Support different verbosity levels
  - [X] Add dedicated logging buffer
- [ ] Authentication/security options
- [ ] Support for .env-like configuration files

* Implementation Tasks

** Core Implementation
- [X] Server instance representation (plist)
- [X] Tool registry data structure
  - [X] Support parameter descriptions for JSON Schema generation
  - [ ] Add JSON Schema type annotations for parameters
- [ ] Resource registry data structure
- [ ] Prompt registry data structure
- [X] Stdio transport adapter script (emacs-mcp-stdio.sh)
  - [X] Handle JSON-RPC requests over stdin/stdout
  - [X] Support configurable socket, init and stop functions
  - [X] Add testing script (emacs-mcp-stdio-test.sh)
  - [X] Integrate with check.sh quality workflow
  - [X] Ensure script accessibility for external clients
    - [X] Add installation function to place script in user's PATH
    - [X] Update documentation with installation instructions
    - [ ] Consider environment variable for script location discovery
    - [X] Include script in proper location in package layout
- [ ] Server synchronization with MCP clients
- [X] Initialize method implementation
  - [X] Define `mcp--handle-initialize` function for the handshake process
  - [ ] Store client capabilities in server state
  - [X] Return server capabilities in response
  - [ ] Add connection lifecycle management
  - [X] Support capability-based feature negotiation

** Testing
- [X] Unit tests for basic server lifecycle
- [X] Unit tests for core protocol methods
- [ ] Add an error counter for JSON-RPC level errors
  - Track parse errors, invalid JSON-RPC format, etc.
  - These errors occur before method dispatch
  - Would allow monitoring transport-level issues
- [X] Test all interactive commands
  - The mcp-server-lib-test-interactive-commands test only checks start/stop
  - Should also test mcp-server-lib-install, mcp-server-lib-uninstall,
    mcp-server-lib-reset-metrics, mcp-server-lib-show-metrics
- [X] Unit tests for initialize handshake
  - [X] Test valid initialize request handling
  - [X] Test protocol version compatibility
  - [X] Test capability reporting
  - [X] Test initialized notification handling (including "notifications/initialized" format)
  - [X] Test error cases (invalid version, etc.)
- [X] Unit tests for tool registration and execution
  - [X] Add test for tools/list method
  - [X] Add test for tools/call method
- [ ] Unit tests for resource handling
- [ ] Unit tests for prompt templating
- [ ] Integration tests with actual LLM clients (Claude, OpenAI, etc.)
- [X] Test fixtures and helper functions (mcp-test-jsonrpc-request)

** CI and Linting
- [X] Fix package dependency issue (Package json is not installable)
- [X] Fix long lines exceeding fill-column (70 characters)
- [X] Fix indentation (use spaces instead of tabs as configured in .dir-locals.el)
- [X] Remove trailing whitespace
- [X] Fix checkdoc issues:
  - Add two spaces after periods
  - Quote Lisp symbols properly
  - Remove whitespace at end of lines
- [X] Fix naming convention (mcp--test-port â†’ mcp-test-port)
- [X] Add byte-compilation checks to test suite
- [X] Integrate elisp-lint into workflow
- [X] Add markdown linting for documentation files
- [X] Simplify Emacs test running in CI:
  - Update GitHub workflow elisp-test.yml to use simpler test command
  - Use consistent test command in CI and CLAUDE.md: emacs -Q --batch -l mcp-server-lib.el -l mcp-server-lib-test.el --eval "(ert-run-tests-batch-and-exit)"

** Documentation
- [ ] Complete package documentation (similar to Python SDK's documentation)
- [X] Usage examples
- [X] API reference documentation
- [X] Example server implementations
- [ ] Example integrations with Emacs packages (org-mode, etc.)
- [ ] Example client applications